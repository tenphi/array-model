// Generated by CoffeeScript 1.6.3
(function() {
  var assert;

  require('./array-model.js');

  assert = require('chai').assert;

  describe('simple assignment :', function() {
    return it('get / set', function() {
      var model;
      model = ['one', 'two', 'three'].model();
      model[1] = 'four';
      assert.equal(model.toString(), 'one,four,three');
      return assert.equal(model[1], 'four');
    });
  });

  describe('simple actions :', function() {
    var model;
    model = ['one', 'two', 'three'].model();
    it('empty', function() {
      return model.empty();
    });
    it('add one item', function() {
      model.push('one');
      assert.equal(model[0], 'one');
      model.add('two');
      assert.equal(model[1], 'two');
      model.unshift('three');
      return assert.equal(model[0], 'three');
    });
    it('remove one item', function() {
      model.remove('one');
      assert.equal(model[1], 'two');
      assert.equal(model.length, 2);
      model.pop();
      assert.equal(model[0], 'three');
      assert.equal(model.length, 1);
      model.shift('three');
      return assert.equal(model.length, 0);
    });
    it('add multiple items', function() {
      model.push('one', 'two', 'three');
      return assert.equal(model.toString(), 'one,two,three');
    });
    return it('splice', function() {
      model.splice(1, 1, 'four');
      return assert.equal(model.toString(), 'one,four,three');
    });
  });

  describe('change event :', function() {
    var model;
    model = [];
    beforeEach(function() {
      return model = ['one', 'two', 'three'].model();
    });
    it('on add item', function() {
      var fired;
      fired = false;
      model.on('change', function(mod) {
        fired = true;
        return assert.strictEqual(mod, model);
      });
      model.add('four');
      return assert.ok(fired);
    });
    it('on remove item', function() {
      var fired;
      fired = false;
      model.on('change', function(mod) {
        fired = true;
        return assert.strictEqual(mod, model);
      });
      model.remove('four');
      assert.notOk(fired);
      model.remove('three');
      return assert.ok(fired);
    });
    it('on add and remove and the same time', function() {
      var fired;
      fired = 0;
      model.on('change', function(mod) {
        fired = 1;
        return assert.strictEqual(mod, model);
      });
      model.splice(1, 1, 'four');
      return assert.equal(fired, 1);
    });
    return it('assignment', function() {
      var fired;
      fired = false;
      model.on('change', function(mod) {
        fired = true;
        return assert.strictEqual(mod, model);
      });
      model[1] = 'three';
      return assert.ok(fired);
    });
  });

  describe('add/remove events :', function() {
    var model;
    model = [];
    beforeEach(function() {
      return model = ['one', 'two', 'three'].model();
    });
    it('on add item', function() {
      var fired;
      fired = false;
      model.on('add', function(val, pos, mod) {
        fired = true;
        assert.equal(val, 'four');
        assert.equal(pos, 3);
        return assert.strictEqual(mod, model);
      });
      model.add('four');
      return assert.ok(fired);
    });
    it('on remove item', function() {
      var fired;
      fired = false;
      model.on('remove', function(val, pos, mod) {
        fired = true;
        assert.equal(val, 'three');
        assert.equal(pos, 2);
        return assert.strictEqual(mod, model);
      });
      model.remove('four');
      assert.notOk(fired);
      model.remove('three');
      return assert.ok(fired);
    });
    it('on add and remove and the same time', function() {
      var fired;
      fired = 0;
      model.on('add', function(val, pos, mod) {
        fired++;
        assert.equal(val, 'four');
        assert.equal(pos, 1);
        return assert.strictEqual(mod, model);
      });
      model.on('remove', function(val, pos, mod) {
        fired++;
        assert.equal(val, 'two');
        assert.equal(pos, 1);
        return assert.strictEqual(mod, model);
      });
      model.splice(1, 1, 'four');
      return assert.equal(fired, 2);
    });
    it('assignment', function() {
      var fired;
      fired = 0;
      model.on('add', function(val, pos, mod) {
        fired++;
        assert.equal(val, 'four');
        assert.equal(pos, 1);
        return assert.strictEqual(mod, model);
      });
      model.on('remove', function(val, pos, mod) {
        fired++;
        assert.equal(val, 'two');
        assert.equal(pos, 1);
        return assert.strictEqual(mod, model);
      });
      model[1] = 'four';
      return assert.equal(fired, 2);
    });
    return it('change on add', function() {
      var fired;
      fired = 0;
      model.on('add', function(val, pos, mod) {
        mod[pos] += 'four';
        return fired++;
      });
      model[1] = 'four';
      model.add('four');
      assert.equal(fired, 2);
      return assert.equal(model.toString(), 'one,fourfour,three,fourfour');
    });
  });

  describe('setter and getter :', function() {
    var model;
    model = [];
    beforeEach(function() {
      return model = ['one', 'two', 'three'].model();
    });
    it('on get item', function() {
      model.get(function(val, pos) {
        assert.equal(pos, 1);
        return val + 'four';
      });
      assert.equal(model[1], 'twofour');
      model.get(function(val) {
        return val + 'four';
      });
      return assert.deepEqual(model.slice(), ['onefour', 'twofour', 'threefour']);
    });
    return it('on set item', function() {
      var fired;
      fired = false;
      model.set(function(val, pos) {
        return fired = true;
      });
      model[1] = 'four';
      assert.ok(fired);
      return assert.equal(model.toString(), 'one,four,three');
    });
  });

  describe('tests from real life :', function() {
    it('prevent addition of objects with wrong type', function() {
      var model;
      model = [].model();
      model.on('add', function(val, pos, mod) {
        if ((typeof val) !== 'number') {
          return mod.splice(pos, 1);
        }
      });
      model.push(42);
      assert.equal(model.toString(), '42');
      model.push('24');
      assert.equal(model.toString(), '42');
      model.push(24);
      assert.equal(model.toString(), '42,24');
      model[1] = '24';
      return assert.equal(model.toString(), '42');
    });
    return it('sqr test', function() {
      var model;
      model = [1, 2, 3].model();
      model.get(function(val) {
        return val * val;
      });
      assert.equal(model.slice().toString(), '1,4,9');
      return assert.equal(model[2], 9);
    });
  });

}).call(this);
