// Generated by CoffeeScript 1.6.3
(function() {
  var ExtArray, method, name, _fn, _i, _len, _ref,
    __slice = [].slice;

  if (!Object.defineProperty) {
    throw new Error('Object.defineProperty is not found');
  }

  if (!Array.prototype.model) {
    Object.defineProperty(Array.prototype, 'model', {
      enumerable: false,
      value: function() {
        var method, name, prop, _i, _len, _ref;
        _ref = ['_bindAll', '_watchers', '_trigger', '_bindTo', '_model', '_get', '_set', 'ext', 'model'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          prop = _ref[_i];
          Object.defineProperty(this, prop, {
            value: 0,
            enumerable: false,
            writable: true
          });
        }
        this._watchers = {
          add: [],
          remove: [],
          change: []
        };
        this._get = null;
        this._set = null;
        this.ext = true;
        this._model = [];
        for (name in ExtArray) {
          method = ExtArray[name];
          this[name] = method;
        }
        this._bindTo = 0;
        this._bindAll();
        return this;
      }
    });
  }

  ExtArray = {};

  ExtArray._pop = Array.prototype.pop;

  ExtArray.pop = function() {
    var item;
    item = this._pop();
    this._bindAll();
    this._trigger('remove', item);
    this._trigger('change');
    return item;
  };

  ExtArray._push = Array.prototype.push;

  ExtArray.push = function() {
    var i, item, items, len, _i, _j, _len, _len1;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this._set) {
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        this._set(item, this.length + i);
      }
    }
    len = this._push.apply(this, items);
    this._bindAll();
    for (i = _j = 0, _len1 = items.length; _j < _len1; i = ++_j) {
      item = items[i];
      this._trigger('add', item, this.length - items.length + i);
    }
    this._trigger('change');
    return len;
  };

  ExtArray._reverse = Array.prototype.reverse;

  ExtArray.reverse = function() {
    this._reverse();
    this._trigger('change');
    return this;
  };

  ExtArray._shift = Array.prototype.shift;

  ExtArray.shift = function() {
    var item;
    item = this._shift();
    this._bindAll();
    this._trigger('remove', item);
    this._trigger('change');
    if (this._get) {
      return this._get(item, 0);
    } else {
      return item;
    }
  };

  ExtArray._sort = Array.prototype.sort;

  ExtArray.sort = function() {
    this._sort();
    return this._trigger('change');
  };

  ExtArray._splice = Array.prototype.splice;

  ExtArray.splice = function() {
    var i, item, items, len, offset, slice, _i, _j, _k, _len, _len1, _len2;
    offset = arguments[0], len = arguments[1], items = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (this._set) {
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        this._set(item, offset + i);
      }
    }
    slice = this._slice(offset, offset + len);
    this._splice.apply(this, [offset, len].concat(__slice.call(items)));
    this._bindAll();
    for (i = _j = 0, _len1 = slice.length; _j < _len1; i = ++_j) {
      item = slice[i];
      this._trigger('remove', item, offset + i);
    }
    for (i = _k = 0, _len2 = items.length; _k < _len2; i = ++_k) {
      item = items[i];
      this._trigger('add', item, offset + i);
    }
    this._trigger('change');
    return slice;
  };

  ExtArray._unshift = Array.prototype.unshift;

  ExtArray.unshift = function() {
    var i, item, items, len, _i, _j, _len, _len1;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this._set) {
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        this._set(item, i);
      }
    }
    len = this._unshift.apply(this, items);
    this._bindAll();
    for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
      item = items[_j];
      this._trigger('add', item, i);
    }
    this._trigger('change');
    return len;
  };

  ExtArray._concat = Array.prototype.concat;

  ExtArray.concat = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this._concat.apply(this, args);
  };

  ExtArray._join = Array.prototype.join;

  ExtArray.join = function(separator) {
    return this._join(separator);
  };

  ExtArray._slice = Array.prototype.slice;

  ExtArray.slice = function(offset, offset2) {
    return this._slice(offset, offset2);
  };

  ExtArray._toString = Array.prototype.toString;

  ExtArray.toString = function() {
    return this._toString();
  };

  ExtArray._indexOf = Array.prototype.indexOf;

  ExtArray.indexOf = function(searchIndex, fromIndex) {
    return this._indexOf(searchIndex, fromIndex);
  };

  ExtArray._lastIndexOf = Array.prototype.lastIndexOf;

  ExtArray.lastIndexOf = function(searchIndex, fromIndex) {
    return this._lastIndexOf(searchIndex, fromIndex);
  };

  ExtArray._forEach = Array.prototype.forEach;

  ExtArray.forEach = function(callback, arg) {
    return this._forEach(callback, arg);
  };

  ExtArray._every = Array.prototype.every;

  ExtArray.every = function(callback, thisObject) {
    return this._every(callback, thisObject);
  };

  ExtArray._some = Array.prototype.some;

  ExtArray.some = function(callback, thisObject) {
    return this._some(callback, thisObject);
  };

  ExtArray._filter = Array.prototype.filter;

  ExtArray.filter = function(callback, thisObject) {
    return this._filter(callback, thisObject);
  };

  ExtArray._map = Array.prototype.map;

  ExtArray.map = function(callback, thisArg) {
    return this._map(callback, thisArg);
  };

  ExtArray._reduce = Array.prototype.reduce;

  ExtArray.reduce = function(callback, initialValue) {
    return this._reduce(callback, initialValue);
  };

  ExtArray._reduceRight = Array.prototype.reduceRight;

  ExtArray.reduceRight = function(callback, initialValue) {
    return this._reduceRight(callback, initialValue);
  };

  ExtArray.add = function(item) {
    return this.push(item);
  };

  ExtArray.remove = function(item) {
    var pos;
    pos = this.indexOf(item);
    if (pos >= 0) {
      this.splice(pos, 1);
    }
    return this;
  };

  ExtArray.replace = function(item1, item2) {
    var pos;
    pos = this.indexOf(item1);
    if (pos >= 0) {
      this.splice(pos, 1, item2);
    }
    return this;
  };

  ExtArray.empty = function() {
    this.splice(0, this.length);
    return this;
  };

  ExtArray.on = function(event, watcher, first) {
    var watchers;
    if (!(event in this._watchers)) {
      return this;
    }
    watchers = this._watchers[event];
    if ((typeof watcher) === 'function') {
      if (first) {
        watchers.unshift(watcher);
      } else {
        watchers.push(watcher);
      }
    }
    return this;
  };

  ExtArray.off = function(event, watcher) {
    var pos, watchers;
    if (!event in watchers) {
      return this;
    }
    watchers = this._watchers[event];
    if (typeof watcher === 'function') {
      pos = watchers.indexOf(watcher);
      if (~pos) {
        watchers.splice(pos, 1);
      }
    } else {
      watchers.splice(0, watchers.length);
    }
    return this;
  };

  ExtArray.get = function(handler) {
    if ((typeof handler) === 'function') {
      this._get = handler;
    } else {
      this._get = null;
    }
    return this;
  };

  ExtArray.set = function(handler) {
    var i, item, _i, _len, _ref;
    if ((typeof handler) === 'function') {
      this._set = handler;
      _ref = this._model;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        this._set(item, i);
      }
    } else {
      this._set = null;
    }
    return this;
  };

  ExtArray._trigger = function(action, item, itemPos) {
    var pos, watcher, watchers, _i, _len;
    watchers = this._watchers[action];
    if (!watchers) {
      return this;
    }
    pos = this._indexOf(item);
    for (_i = 0, _len = watchers.length; _i < _len; _i++) {
      watcher = watchers[_i];
      if (action === 'change') {
        watcher(this);
      } else {
        pos = itemPos || (pos < 0 ? void 0 : pos);
        watcher(item, pos, this);
      }
    }
    return this;
  };

  ExtArray._bindAll = function() {
    var len, model,
      _this = this;
    model = this._model;
    len = this.length;
    if (this._bindTo === len) {
      return;
    }
    if (this._bindTo > len) {
      this._bindTo = len;
      return;
    }
    while (this._bindTo !== len) {
      (function(pos) {
        var val;
        val = _this[pos];
        Object.defineProperty(_this, pos, {
          get: function() {
            if (_this._get) {
              return _this._get(model[pos], pos);
            } else {
              return model[pos];
            }
          },
          set: function(val) {
            if (_this._set) {
              _this._set(val, pos);
            }
            if (_this._mutator) {
              model[pos] = val;
            } else {
              _this.splice(pos, 1, val);
            }
            return val;
          },
          enumerable: true
        });
        return _this[pos] = val;
      })(this._bindTo++);
    }
    return this;
  };

  _ref = ['push', 'pop', 'splice', 'shift', 'unshift'];
  _fn = function(method) {
    return ExtArray[name] = function() {
      var args, e, resp;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._mutator = true;
      try {
        resp = method.apply(this, args);
      } catch (_error) {
        e = _error;
        this._mutator = false;
        throw e;
      }
      this._mutator = false;
      return resp;
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    method = ExtArray[name];
    _fn(method);
  }

}).call(this);
